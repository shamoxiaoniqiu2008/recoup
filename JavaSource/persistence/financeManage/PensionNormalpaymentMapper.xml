<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.financeManage.PensionNormalpaymentMapper">
	<resultMap id="BaseResultMap" type="domain.financeManage.PensionNormalpayment">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="older_id" jdbcType="INTEGER" property="olderId" />
		<result column="totalFees" jdbcType="REAL" property="totalfees" />
		<result column="NumberID" jdbcType="VARCHAR" property="numberid" />
		<result column="generateTime" jdbcType="TIMESTAMP" property="generatetime" />
		<result column="generator_id" jdbcType="INTEGER" property="generatorId" />
		<result column="generator_name" jdbcType="VARCHAR" property="generatorName" />
		<result column="isPay" jdbcType="INTEGER" property="ispay" />
		<result column="payee_id" jdbcType="INTEGER" property="payeeId" />
		<result column="payee_name" jdbcType="VARCHAR" property="payeeName" />
		<result column="notes" jdbcType="VARCHAR" property="notes" />
		<result column="isClosed" jdbcType="INTEGER" property="isclosed" />
		<result column="closed_id" jdbcType="INTEGER" property="closedId" />
		<result column="closed_name" jdbcType="VARCHAR" property="closedName" />
		<result column="closedTime" jdbcType="TIMESTAMP" property="closedtime" />
		<result column="payTime" jdbcType="TIMESTAMP" property="paytime" />
		<result column="cleared" jdbcType="INTEGER" property="cleared" />
		<result column="closeNumber" jdbcType="INTEGER" property="closenumber" />
		<result column="settled_flag" jdbcType="INTEGER" property="settledFlag" />
		<result column="settle_id" jdbcType="INTEGER" property="settleId" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
                </when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
                </when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
                </when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
                  </foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
                </when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
                </when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
                </when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
                  </foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		id, older_id, totalFees, NumberID, generateTime, generator_id,
		generator_name, isPay,
		payee_id, payee_name, notes, isClosed, closed_id, closed_name, closedTime,
		payTime,
		cleared, closeNumber, settled_flag, settle_id
	</sql>
	<select id="selectByExample" parameterType="domain.financeManage.PensionNormalpaymentExample"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		select
		<if test="distinct">
			distinct
    </if>
		<include refid="Base_Column_List" />
		from pension_normalpayment
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
    </if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		select
		<include refid="Base_Column_List" />
		from pension_normalpayment
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		delete from pension_normalpayment
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="domain.financeManage.PensionNormalpaymentExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		delete from pension_normalpayment
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="domain.financeManage.PensionNormalpayment">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		insert into pension_normalpayment (id, older_id, totalFees,
		NumberID, generateTime, generator_id,
		generator_name, isPay, payee_id,
		payee_name, notes, isClosed,
		closed_id, closed_name, closedTime,
		payTime, cleared, closeNumber,
		settled_flag, settle_id)
		values (#{id,jdbcType=INTEGER}, #{olderId,jdbcType=INTEGER},
		#{totalfees,jdbcType=REAL},
		#{numberid,jdbcType=VARCHAR}, #{generatetime,jdbcType=TIMESTAMP}, #{generatorId,jdbcType=INTEGER},
		#{generatorName,jdbcType=VARCHAR}, #{ispay,jdbcType=INTEGER},
		#{payeeId,jdbcType=INTEGER},
		#{payeeName,jdbcType=VARCHAR}, #{notes,jdbcType=VARCHAR}, #{isclosed,jdbcType=INTEGER},
		#{closedId,jdbcType=INTEGER}, #{closedName,jdbcType=VARCHAR},
		#{closedtime,jdbcType=TIMESTAMP},
		#{paytime,jdbcType=TIMESTAMP}, #{cleared,jdbcType=INTEGER}, #{closenumber,jdbcType=INTEGER},
		#{settledFlag,jdbcType=INTEGER}, #{settleId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" keyProperty="id"
		parameterType="domain.financeManage.PensionNormalpayment"
		useGeneratedKeys="true">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		insert into pension_normalpayment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
      </if>
			<if test="olderId != null">
				older_id,
      </if>
			<if test="totalfees != null">
				totalFees,
      </if>
			<if test="numberid != null">
				NumberID,
      </if>
			<if test="generatetime != null">
				generateTime,
      </if>
			<if test="generatorId != null">
				generator_id,
      </if>
			<if test="generatorName != null">
				generator_name,
      </if>
			<if test="ispay != null">
				isPay,
      </if>
			<if test="payeeId != null">
				payee_id,
      </if>
			<if test="payeeName != null">
				payee_name,
      </if>
			<if test="notes != null">
				notes,
      </if>
			<if test="isclosed != null">
				isClosed,
      </if>
			<if test="closedId != null">
				closed_id,
      </if>
			<if test="closedName != null">
				closed_name,
      </if>
			<if test="closedtime != null">
				closedTime,
      </if>
			<if test="paytime != null">
				payTime,
      </if>
			<if test="cleared != null">
				cleared,
      </if>
			<if test="closenumber != null">
				closeNumber,
      </if>
			<if test="settledFlag != null">
				settled_flag,
      </if>
			<if test="settleId != null">
				settle_id,
      </if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
      </if>
			<if test="olderId != null">
				#{olderId,jdbcType=INTEGER},
      </if>
			<if test="totalfees != null">
				#{totalfees,jdbcType=REAL},
      </if>
			<if test="numberid != null">
				#{numberid,jdbcType=VARCHAR},
      </if>
			<if test="generatetime != null">
				#{generatetime,jdbcType=TIMESTAMP},
      </if>
			<if test="generatorId != null">
				#{generatorId,jdbcType=INTEGER},
      </if>
			<if test="generatorName != null">
				#{generatorName,jdbcType=VARCHAR},
      </if>
			<if test="ispay != null">
				#{ispay,jdbcType=INTEGER},
      </if>
			<if test="payeeId != null">
				#{payeeId,jdbcType=INTEGER},
      </if>
			<if test="payeeName != null">
				#{payeeName,jdbcType=VARCHAR},
      </if>
			<if test="notes != null">
				#{notes,jdbcType=VARCHAR},
      </if>
			<if test="isclosed != null">
				#{isclosed,jdbcType=INTEGER},
      </if>
			<if test="closedId != null">
				#{closedId,jdbcType=INTEGER},
      </if>
			<if test="closedName != null">
				#{closedName,jdbcType=VARCHAR},
      </if>
			<if test="closedtime != null">
				#{closedtime,jdbcType=TIMESTAMP},
      </if>
			<if test="paytime != null">
				#{paytime,jdbcType=TIMESTAMP},
      </if>
			<if test="cleared != null">
				#{cleared,jdbcType=INTEGER},
      </if>
			<if test="closenumber != null">
				#{closenumber,jdbcType=INTEGER},
      </if>
			<if test="settledFlag != null">
				#{settledFlag,jdbcType=INTEGER},
      </if>
			<if test="settleId != null">
				#{settleId,jdbcType=INTEGER},
      </if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="domain.financeManage.PensionNormalpaymentExample"
		resultType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		select count(*) from pension_normalpayment
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		update pension_normalpayment
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
      </if>
			<if test="record.olderId != null">
				older_id = #{record.olderId,jdbcType=INTEGER},
      </if>
			<if test="record.totalfees != null">
				totalFees = #{record.totalfees,jdbcType=REAL},
      </if>
			<if test="record.numberid != null">
				NumberID = #{record.numberid,jdbcType=VARCHAR},
      </if>
			<if test="record.generatetime != null">
				generateTime = #{record.generatetime,jdbcType=TIMESTAMP},
      </if>
			<if test="record.generatorId != null">
				generator_id = #{record.generatorId,jdbcType=INTEGER},
      </if>
			<if test="record.generatorName != null">
				generator_name = #{record.generatorName,jdbcType=VARCHAR},
      </if>
			<if test="record.ispay != null">
				isPay = #{record.ispay,jdbcType=INTEGER},
      </if>
			<if test="record.payeeId != null">
				payee_id = #{record.payeeId,jdbcType=INTEGER},
      </if>
			<if test="record.payeeName != null">
				payee_name = #{record.payeeName,jdbcType=VARCHAR},
      </if>
			<if test="record.notes != null">
				notes = #{record.notes,jdbcType=VARCHAR},
      </if>
			<if test="record.isclosed != null">
				isClosed = #{record.isclosed,jdbcType=INTEGER},
      </if>
			<if test="record.closedId != null">
				closed_id = #{record.closedId,jdbcType=INTEGER},
      </if>
			<if test="record.closedName != null">
				closed_name = #{record.closedName,jdbcType=VARCHAR},
      </if>
			<if test="record.closedtime != null">
				closedTime = #{record.closedtime,jdbcType=TIMESTAMP},
      </if>
			<if test="record.paytime != null">
				payTime = #{record.paytime,jdbcType=TIMESTAMP},
      </if>
			<if test="record.cleared != null">
				cleared = #{record.cleared,jdbcType=INTEGER},
      </if>
			<if test="record.closenumber != null">
				closeNumber = #{record.closenumber,jdbcType=INTEGER},
      </if>
			<if test="record.settledFlag != null">
				settled_flag = #{record.settledFlag,jdbcType=INTEGER},
      </if>
			<if test="record.settleId != null">
				settle_id = #{record.settleId,jdbcType=INTEGER},
      </if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		update pension_normalpayment
		set id = #{record.id,jdbcType=INTEGER},
		older_id = #{record.olderId,jdbcType=INTEGER},
		totalFees = #{record.totalfees,jdbcType=REAL},
		NumberID = #{record.numberid,jdbcType=VARCHAR},
		generateTime = #{record.generatetime,jdbcType=TIMESTAMP},
		generator_id = #{record.generatorId,jdbcType=INTEGER},
		generator_name = #{record.generatorName,jdbcType=VARCHAR},
		isPay = #{record.ispay,jdbcType=INTEGER},
		payee_id = #{record.payeeId,jdbcType=INTEGER},
		payee_name = #{record.payeeName,jdbcType=VARCHAR},
		notes = #{record.notes,jdbcType=VARCHAR},
		isClosed = #{record.isclosed,jdbcType=INTEGER},
		closed_id = #{record.closedId,jdbcType=INTEGER},
		closed_name = #{record.closedName,jdbcType=VARCHAR},
		closedTime = #{record.closedtime,jdbcType=TIMESTAMP},
		payTime = #{record.paytime,jdbcType=TIMESTAMP},
		cleared = #{record.cleared,jdbcType=INTEGER},
		closeNumber = #{record.closenumber,jdbcType=INTEGER},
		settled_flag = #{record.settledFlag,jdbcType=INTEGER},
		settle_id = #{record.settleId,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="domain.financeManage.PensionNormalpayment">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		update pension_normalpayment
		<set>
			<if test="olderId != null">
				older_id = #{olderId,jdbcType=INTEGER},
      </if>
			<if test="totalfees != null">
				totalFees = #{totalfees,jdbcType=REAL},
      </if>
			<if test="numberid != null">
				NumberID = #{numberid,jdbcType=VARCHAR},
      </if>
			<if test="generatetime != null">
				generateTime = #{generatetime,jdbcType=TIMESTAMP},
      </if>
			<if test="generatorId != null">
				generator_id = #{generatorId,jdbcType=INTEGER},
      </if>
			<if test="generatorName != null">
				generator_name = #{generatorName,jdbcType=VARCHAR},
      </if>
			<if test="ispay != null">
				isPay = #{ispay,jdbcType=INTEGER},
      </if>
			<if test="payeeId != null">
				payee_id = #{payeeId,jdbcType=INTEGER},
      </if>
			<if test="payeeName != null">
				payee_name = #{payeeName,jdbcType=VARCHAR},
      </if>
			<if test="notes != null">
				notes = #{notes,jdbcType=VARCHAR},
      </if>
			<if test="isclosed != null">
				isClosed = #{isclosed,jdbcType=INTEGER},
      </if>
			<if test="closedId != null">
				closed_id = #{closedId,jdbcType=INTEGER},
      </if>
			<if test="closedName != null">
				closed_name = #{closedName,jdbcType=VARCHAR},
      </if>
			<if test="closedtime != null">
				closedTime = #{closedtime,jdbcType=TIMESTAMP},
      </if>
			<if test="paytime != null">
				payTime = #{paytime,jdbcType=TIMESTAMP},
      </if>
			<if test="cleared != null">
				cleared = #{cleared,jdbcType=INTEGER},
      </if>
			<if test="closenumber != null">
				closeNumber = #{closenumber,jdbcType=INTEGER},
      </if>
			<if test="settledFlag != null">
				settled_flag = #{settledFlag,jdbcType=INTEGER},
      </if>
			<if test="settleId != null">
				settle_id = #{settleId,jdbcType=INTEGER},
      </if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="domain.financeManage.PensionNormalpayment">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 12 
			16:42:38 CST 2013. -->
		update pension_normalpayment
		set older_id = #{olderId,jdbcType=INTEGER},
		totalFees = #{totalfees,jdbcType=REAL},
		NumberID = #{numberid,jdbcType=VARCHAR},
		generateTime = #{generatetime,jdbcType=TIMESTAMP},
		generator_id = #{generatorId,jdbcType=INTEGER},
		generator_name = #{generatorName,jdbcType=VARCHAR},
		isPay = #{ispay,jdbcType=INTEGER},
		payee_id = #{payeeId,jdbcType=INTEGER},
		payee_name = #{payeeName,jdbcType=VARCHAR},
		notes = #{notes,jdbcType=VARCHAR},
		isClosed = #{isclosed,jdbcType=INTEGER},
		closed_id = #{closedId,jdbcType=INTEGER},
		closed_name = #{closedName,jdbcType=VARCHAR},
		closedTime = #{closedtime,jdbcType=TIMESTAMP},
		payTime = #{paytime,jdbcType=TIMESTAMP},
		cleared = #{cleared,jdbcType=INTEGER},
		closeNumber = #{closenumber,jdbcType=INTEGER},
		settled_flag = #{settledFlag,jdbcType=INTEGER},
		settle_id = #{settleId,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>




	<!-- 查询老人的缴费记录 mary liu 2013-8-29 -->

	<select id="selectNormalPaymentInfo" parameterType="java.util.Map"
		resultMap="BaseResultMapExtend">



		SELECT n.*,

		o.`name` as older_name,

		IF(o.sex &gt; 1,'女','男') as
		older_sex,

		o.birthday as birthday,

		bu.`name` building_name,

		f.`name` as
		floor_name,

		r.`name` as room_name,

		be.`name` as bed_name,

		dn.`level` as
		nurse_level,

		dbt.`level` as bed_type_level,

		l.visitTime as visitTime,

		IF(n.isPay &gt; 1,'否','是') as isPayStr,

		IF(n.isClosed &gt; 1,'否','是') as isCloseStr

		from pension_building bu,

		pension_floor
		f,

		pension_room r,

		pension_bed be,

		pension_normalpayment n,

		pension_older
		o,

		pension_livingrecord l,

		pension_dic_bedtype dbt,

		pension_dic_nurse dn



		where bu.id=f.build_id

		and f.id=r.floor_id

		and r.id=be.room_id

		and
		be.id=l.bed_id

		and l.bedType_id=dbt.id

		and l.nurseLevel_id=dn.id

		and
		o.id=n.older_id

		and l.older_id=n.older_id
		<if test="olderId != null"> and n.older_id=#{olderId,jdbcType=DECIMAL}
	</if>

		<if test="orderName != null">
			and o.`name` like #{orderName,jdbcType=VARCHAR}
	</if>

		<if test="paidFlag != null">
			and n.isPay=#{paidFlag,jdbcType=DECIMAL}
	</if>
		<if test="startDate != null">
			and unix_timestamp(n.generateTime)
			&gt;=unix_timestamp(#{startDate})
	</if>
		<if test="endDate != null">
			and unix_timestamp(n.generateTime)
			&lt;=unix_timestamp(#{endDate})
	</if>
		and o.statuses in (3,4,5)

		and n.cleared = 2 ORDER BY n.generateTime
		DESC

	</select>









	<!-- 扩展日常缴费记录主表的扩展字段 mary liu 2013-8-29 -->

	<resultMap id="BaseResultMapExtend" type="domain.financeManage.PensionNormalpayment">

		<id column="id" jdbcType="INTEGER" property="id" />

		<result column="older_id" jdbcType="INTEGER" property="olderId" />

		<result column="totalFees" jdbcType="REAL" property="totalfees" />

		<result column="NumberID" jdbcType="VARCHAR" property="numberid" />

		<result column="generateTime" jdbcType="TIMESTAMP" property="generatetime" />

		<result column="generator_id" jdbcType="INTEGER" property="generatorId" />

		<result column="generator_name" jdbcType="VARCHAR" property="generatorName" />

		<result column="isPay" jdbcType="INTEGER" property="ispay" />

		<result column="payee_id" jdbcType="INTEGER" property="payeeId" />

		<result column="payee_name" jdbcType="VARCHAR" property="payeeName" />

		<result column="notes" jdbcType="VARCHAR" property="notes" />

		<result column="isClosed" jdbcType="INTEGER" property="isclosed" />

		<result column="closed_id" jdbcType="INTEGER" property="closedId" />

		<result column="closed_name" jdbcType="VARCHAR" property="closedName" />

		<result column="closedTime" jdbcType="TIMESTAMP" property="closedtime" />

		<result column="payTime" jdbcType="TIMESTAMP" property="paytime" />

		<result column="cleared" jdbcType="INTEGER" property="cleared" />



		<!-- 扩展字段 mary liu 2013-8-29 -->

		<result column="isPayStr" jdbcType="VARCHAR" property="isPayStr" />

		<result column="isCloseStr" jdbcType="VARCHAR" property="isCloseStr" />

		<result column="older_name" jdbcType="VARCHAR" property="name" />

		<result column="older_sex" jdbcType="VARCHAR" property="sex" />

		<result column="birthday" jdbcType="TIMESTAMP" property="birthDay" />

		<result column="building_name" jdbcType="VARCHAR" property="buildingName" />

		<result column="floor_name" jdbcType="VARCHAR" property="floorName" />

		<result column="room_name" jdbcType="VARCHAR" property="roomName" />

		<result column="bed_name" jdbcType="VARCHAR" property="bedName" />

		<result column="nurse_level" jdbcType="VARCHAR" property="nurseLevel" />

		<result column="bed_type_level" jdbcType="VARCHAR" property="bedLevel" />

		<result column="visitTime" jdbcType="TIMESTAMP" property="beginDate" />

	</resultMap>


	<!-- 财务结帐所需扩展日常缴费记录主表的扩展字段 mary liu 2013-8-29 -->

	<resultMap id="BaseResultMapBalanceExtend" type="domain.financeManage.PensionNormalpayment">

		<id column="id" jdbcType="INTEGER" property="id" />

		<result column="older_id" jdbcType="INTEGER" property="olderId" />

		<result column="totalFees" jdbcType="REAL" property="totalfees" />

		<result column="NumberID" jdbcType="VARCHAR" property="numberid" />

		<result column="generateTime" jdbcType="TIMESTAMP" property="generatetime" />

		<result column="generator_id" jdbcType="INTEGER" property="generatorId" />

		<result column="generator_name" jdbcType="VARCHAR" property="generatorName" />

		<result column="isPay" jdbcType="INTEGER" property="ispay" />

		<result column="payee_id" jdbcType="INTEGER" property="payeeId" />

		<result column="payee_name" jdbcType="VARCHAR" property="payeeName" />

		<result column="notes" jdbcType="VARCHAR" property="notes" />

		<result column="isClosed" jdbcType="INTEGER" property="isclosed" />

		<result column="closed_id" jdbcType="INTEGER" property="closedId" />

		<result column="closed_name" jdbcType="VARCHAR" property="closedName" />

		<result column="closedTime" jdbcType="TIMESTAMP" property="closedtime" />

		<result column="payTime" jdbcType="TIMESTAMP" property="paytime" />

		<result column="cleared" jdbcType="INTEGER" property="cleared" />



		<!-- 扩展字段 mary liu 2013-8-29 -->

		<result column="older_name" jdbcType="VARCHAR" property="name" />
		<result column="dept_name" jdbcType="VARCHAR" property="DeptName" />


	</resultMap>




	<!-- 查询老人信息 mary liu 2013-9-2 -->

	<select id="selectInfo" parameterType="java.lang.Long"
		resultMap="BaseResultMapExtend">

		SELECT o.name as older_name, o.id as older_id,
		bu.name as
		building_name,
		f.name as floor_name, r.name as room_name,
		be.name as
		bed_name,
		dn.level as nurse_level, db.level as bed_type_level,
		l.visitTime as visitTime,
		IF(o.sex &gt; 1,'女','男') as older_sex,
		o.birthday as birthday

		from pension_older o,
		pension_livingrecord l, pension_building bu,
		pension_floor f, pension_room r, pension_bed be,
		pension_dic_bedtype
		db, pension_dic_nurse dn
		where dn.id=l.nurseLevel_id and
		db.id=l.bedType_id
		and bu.id=f.build_id and f.id=r.floor_id
		and
		r.id=be.room_id and be.id=l.bed_id
		and l.older_id=o.id
		and
		o.id=#{olderId,jdbcType=DECIMAL}
		and o.statuses in (3,4,5)
  </select>
	<select id="selectNomalRecords" parameterType="java.lang.Integer"
		resultType="service.financeManage.NormalPayDomain">
		select
		pn.id,
		(pd.itemlFees*pd.number) as totalfees,
		pn.generateTime as generatetime,
		pn.isPay as ispay,pn.isClosed as
		isclosed,
		pn.payTime as paytime,
		pn.closedTime as
		closedtime,pd.itemlFees,
		pd.item_name as itemName,pd.number,
		"日常收费" as feeCatalog
		from pension_normalpayment pn,
		pension_normalpaymentdetail pd
		where pd.payment_id=pn.id
		and pn.older_id=#{olderId}

		union all

		select pn.id,
		(pd.itemlFees*pd.number) as totalfees,
		pn.generateTime as generatetime,
		pn.isPay as ispay,pn.isClosed as
		isclosed,
		pn.payTime as paytime,
		pn.closedTime as
		closedtime,pd.itemlFees,
		pd.item_name as itemName,pd.number,
		"临时收费" as feeCatalog
		from
		pension_temppayment pn,pension_temppaymentdetail pd
		where
		pd.payment_id=pn.id
		and pn.older_id=#{olderId}
  </select>

	<!-- 按照老人Id查询老人缴费主记录 add by Mary 2013-9-22 -->

	<select id="selectNormalPaymentList" parameterType="java.util.Map"
		resultMap="BaseResultMapExtend">



		SELECT n.*,

		IF(n.isPay &gt; 1,'否','是') as isPayStr,

		IF(n.isClosed &gt; 1,'否','是') as isCloseStr

		from

		pension_normalpayment n

		where

		1=1

		<if test="olderId != null">

			and n.older_id=#{olderId,jdbcType=DECIMAL}
	</if>



		and n.cleared = 2 ORDER BY n.generateTime DESC

	</select>

	<!-- 按照老人Id查询老人缴费主记录 add by Mary 2013-9-22 -->

	<select id="selectNormalBalancePayments" parameterType="java.util.Map"
		resultMap="BaseResultMapBalanceExtend">
		select np.*,older.name as older_name,dept.name as dept_name
		from pension_normalpayment np
		left join pension_older older
		on np.older_id = older.id
		left join pension_employee emp
		on emp.id = np.payee_id
		left join pension_dept dept
		on emp.dept_id = dept.id
		where 1=1
		and np.cleared = 2
		and np.payTime is not null
		<if test="settleFlag != null">
			and np.settled_flag = #{settleFlag,jdbcType=INTEGER}
	</if>
		<if test="empId != null">
			and emp.id = #{empId,jdbcType=DECIMAL}
	</if>
		<if test="deptId != null">
			and dept.id = #{deptId,jdbcType=DECIMAL}
	</if>
		<if test="balanceStartDate != null">
			and unix_timestamp(np.payTime)
			&gt;=unix_timestamp(#{balanceStartDate})
		</if>
		<if test="balanceEndDate != null">
			and unix_timestamp(np.payTime)
			&lt;=unix_timestamp(#{balanceEndDate})
		</if>


		order by np.payTime


	</select>

	<resultMap id="PaymentReportResultMap" type="domain.reportManage.PaymentReport">
		<result column="older_id" jdbcType="INTEGER" property="olderId" />
		<result column="older_name" jdbcType="VARCHAR" property="olderName" />
		<result column="older_sex" jdbcType="VARCHAR" property="olderSex" />
		<result column="older_age" jdbcType="INTEGER" property="olderAge" />
		<result column="item_id" jdbcType="INTEGER" property="itemId" />
		<result column="item_name" jdbcType="VARCHAR" property="itemName" />
		<result column="item_fees" jdbcType="REAL" property="itemFees" />
		<result column="item_num" jdbcType="REAL" property="itemNum" />
		<result column="totalFees" jdbcType="REAL" property="totalFees" />
		<result column="generateTime" jdbcType="TIMESTAMP" property="genetateTime" />
		<result column="payTime" jdbcType="TIMESTAMP" property="payTime" />
		<result column="older_status" jdbcType="VARCHAR" property="olderStatus" />
		<result column="classes" jdbcType="VARCHAR" property="classes" />
		<result column="source" jdbcType="INTEGER" property="source" />
	</resultMap>

	<!-- 按截止日期查询老人缴费记录 add by mary 2013-11-19 -->
	<select id="selectPaidReportMain" parameterType="java.util.Map"
		resultMap="PaymentReportResultMap">
select older_id,older_name,older_sex,older_age,sum(totalFees) as totalFees,older_status from 
(
		select * from
		(
		select po.id as older_id,
		po.name as older_name,
		IF(po.sex &gt; 1,'女','男') as older_sex,
		po.age as older_age,
		npd.items_id as item_id,
		npd.item_name as item_name,
		npd.itemlFees as item_fees,
		npd.number as item_num,
		npd.totalFees as totalFees,
		np.generateTime as generateTime,
		np.payTime as payTime,
		case po .statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算' when
		6 then '已离院' end as older_status,
		'normal' as classes,
		0 as source
		from pension_older po
		left join pension_normalpayment np
		on np.older_id = po.id
		left join pension_normalpaymentdetail npd
		on npd.payment_id = np.id
		where np.cleared = 2
		<if test="startDate != null">
			and unix_timestamp(np.generateTime)
			&gt;=unix_timestamp(#{startDate})
		</if>
		<if test="endDate != null">
			and unix_timestamp(np.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and unix_timestamp(np.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
		) a
		union
		(
		select older.id as older_id,
		older.name as older_name,
		IF(older.sex &gt; 1,'女','男') as older_sex,
		older.age as older_age,
		detail.items_id as item_id,
		detail.item_name as item_name,
		detail.itemlFees as item_fees,
		detail.number as item_num,
		detail.totalFees as totalFees,
		payment.generateTime as generateTime,
		payment.payTime as payTime,
		case older.statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算'
		when 6 then '已离院' end as older_status,
		'temp' as classes,
		detail.source as source
		from pension_older older
		left join pension_temppayment payment
		on payment.older_id = older.id
		left join pension_temppaymentdetail detail
		on detail.payment_id = payment.id
		where payment.cleared = 2
		<if test="startDate != null">
			and unix_timestamp(payment.generateTime)
			&gt;=unix_timestamp(#{startDate})
</if>
		<if test="endDate != null">
			and unix_timestamp(payment.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and unix_timestamp(payment.payTime)
			&lt;=unix_timestamp(#{endDate})
		</if>
		)
		order by older_id,classes
	) b group by older_id
	</select>
	<!-- 按老人查询起至日期内老人已缴费明细 add by mary 2013-11-19 -->
	<select id="selectPaidReport" parameterType="java.util.Map"
		resultMap="PaymentReportResultMap">
		select * from
		(
		select po.id as older_id,
		po.name as older_name,
		IF(po.sex &gt; 1,'女','男') as older_sex,
		po.age as older_age,
		npd.items_id as item_id,
		npd.item_name as item_name,
		npd.itemlFees as item_fees,
		npd.number as item_num,
		npd.totalFees as totalFees,
		np.generateTime as generateTime,
		np.payTime as payTime,
		case po .statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算' when
		6 then '已离院' end as older_status,
		'normal' as classes,
		0 as source
		from pension_older po
		left join pension_normalpayment np
		on np.older_id = po.id
		left join pension_normalpaymentdetail npd
		on npd.payment_id = np.id
		where np.cleared = 2
		<if test="empId != null">
			and npd.older_id = #{empId}
</if>
		<if test="startDate != null">
			and unix_timestamp(np.generateTime)
			&gt;=unix_timestamp(#{startDate})
		</if>
		<if test="endDate != null">
			and unix_timestamp(np.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and unix_timestamp(np.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
		) a
		union
		(
		select older.id as older_id,
		older.name as older_name,
		IF(older.sex &gt; 1,'女','男') as older_sex,
		older.age as older_age,
		detail.items_id as item_id,
		detail.item_name as item_name,
		detail.itemlFees as item_fees,
		detail.number as item_num,
		detail.totalFees as totalFees,
		payment.generateTime as generateTime,
		payment.payTime as payTime,
		case older.statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算'
		when 6 then '已离院' end as older_status,
		'temp' as classes,
		detail.source as source
		from pension_older older
		left join pension_temppayment payment
		on payment.older_id = older.id
		left join pension_temppaymentdetail detail
		on detail.payment_id = payment.id
		where payment.cleared = 2
		<if test="empId != null">
			and detail.older_id = #{empId}
</if>
		<if test="startDate != null">
			and unix_timestamp(payment.generateTime)
			&gt;=unix_timestamp(#{startDate})
</if>
		<if test="endDate != null">
			and unix_timestamp(payment.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and unix_timestamp(payment.payTime)
			&lt;=unix_timestamp(#{endDate})
		</if>
		)
		order by older_id,classes
	
	</select>

	<!-- 按截止日期查询老人缴费记录 add by mary 2013-11-19 -->
	<select id="selectUnpaidReport" parameterType="java.util.Map"
		resultMap="PaymentReportResultMap">

		select * from
		(
		select po.id as older_id,
		po.name as older_name,
		IF(po.sex &gt; 1,'女','男') as older_sex,
		po.age as older_age,
		npd.items_id as item_id,
		npd.item_name as item_name,
		npd.itemlFees as item_fees,
		npd.number as item_num,
		npd.totalFees as totalFees,
		np.generateTime as generateTime,
		np.payTime as payTime,
		case po .statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算' when
		6 then '已离院' end as older_status,
		'normal' as classes,
		0 as source
		from pension_older po
		left join pension_normalpayment np
		on np.older_id = po.id
		left join pension_normalpaymentdetail npd
		on npd.payment_id = np.id
		where po.cleared=2
		and np.cleared = 2
		and npd.cleared=2
		and npd.number &gt; 0
		<if test="olderId != null">
			and npd.older_id = #{olderId}
</if>
		<if test="startDate != null">
			and unix_timestamp(np.generateTime)
			&gt;=unix_timestamp(#{startDate})
		</if>
		<if test="endDate != null">
			and unix_timestamp(np.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and (unix_timestamp(np.payTime)
			&gt;=unix_timestamp(#{endDate})
			or np.payTime is null)
</if>
		) a
		union
		(
		select older.id as older_id,
		older.name as older_name,
		IF(older.sex &gt; 1,'女','男') as older_sex,
		older.age as older_age,
		detail.items_id as item_id,
		detail.item_name as item_name,
		detail.itemlFees as item_fees,
		detail.number as item_num,
		detail.totalFees as totalFees,
		payment.generateTime as generateTime,
		payment.payTime as payTime,
		case older.statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算'
		when 6 then '已离院' end as older_status,
		'temp' as classes,
		detail.source as source
		from pension_older older
		left join pension_temppayment payment
		on payment.older_id = older.id
		left join pension_temppaymentdetail detail
		on detail.payment_id = payment.id
		where payment.cleared = 2
		and older.cleared=2
		and detail.cleared=2
		and detail.number &gt; 0
		<if test="olderId != null">
			and detail.older_id = #{olderId}
</if>
		<if test="startDate != null">
			and unix_timestamp(payment.generateTime)
			&gt;=unix_timestamp(#{startDate})
</if>
		<if test="endDate != null">
			and unix_timestamp(payment.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and (unix_timestamp(payment.payTime)
			&gt;=unix_timestamp(#{endDate})
			or payment.payTime is null)
</if>
		)
		order by older_id,classes
	</select>
	<!-- 按截止日期查询老人缴费记录 add by mary 2013-11-19 -->
	<select id="selectUnpaidReportMain" parameterType="java.util.Map"
		resultMap="PaymentReportResultMap">
select older_id,older_name,older_sex,older_age,sum(totalFees) as totalFees,older_status from 
(
		select * from
		(
		select po.id as older_id,
		po.name as older_name,
		IF(po.sex &gt; 1,'女','男') as older_sex,
		po.age as older_age,
		npd.items_id as item_id,
		npd.item_name as item_name,
		npd.itemlFees as item_fees,
		npd.number as item_num,
		npd.totalFees as totalFees,
		np.generateTime as generateTime,
		np.payTime as payTime,
		case po .statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算' when
		6 then '已离院' end as older_status,
		'normal' as classes,
		0 as source
		from pension_older po
		left join pension_normalpayment np
		on np.older_id = po.id
		left join pension_normalpaymentdetail npd
		on npd.payment_id = np.id
		where np.cleared = 2
		and npd.number &gt; 0
		<if test="startDate != null">
			and unix_timestamp(np.generateTime)
			&gt;=unix_timestamp(#{startDate})
		</if>
		<if test="endDate != null">
			and unix_timestamp(np.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and (unix_timestamp(np.payTime)
			&gt;=unix_timestamp(#{endDate})
			or np.payTime is null)
</if>
		) a
		union
		(
		select older.id as older_id,
		older.name as older_name,
		IF(older.sex &gt; 1,'女','男') as older_sex,
		older.age as older_age,
		detail.items_id as item_id,
		detail.item_name as item_name,
		detail.itemlFees as item_fees,
		detail.number as item_num,
		detail.totalFees as totalFees,
		payment.generateTime as generateTime,
		payment.payTime as payTime,
		case older.statuses WHEN 3 then '入住' when 4 then '请假' WHEN 5 then '待结算'
		when 6 then '已离院' end as older_status,
		'temp' as classes,
		detail.source as source
		from pension_older older
		left join pension_temppayment payment
		on payment.older_id = older.id
		left join pension_temppaymentdetail detail
		on detail.payment_id = payment.id
		where payment.cleared = 2
		and detail.number &gt; 0
		<if test="startDate != null">
			and unix_timestamp(payment.generateTime)
			&gt;=unix_timestamp(#{startDate})
</if>
		<if test="endDate != null">
			and unix_timestamp(payment.generateTime)
			&lt;=unix_timestamp(#{endDate})
			and (unix_timestamp(payment.payTime)
			&gt;=unix_timestamp(#{endDate})
			or payment.payTime is null)
</if>
		)
		order by older_id,classes
		) b group by older_id
	</select>
</mapper>