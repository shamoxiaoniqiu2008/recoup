<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.configureManage.PensionBuildingMapper">
  <resultMap id="BaseResultMap" type="domain.configureManage.PensionBuilding">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="rest_id" jdbcType="VARCHAR" property="restId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="floorNumber" jdbcType="INTEGER" property="floornumber" />
    <result column="roomNumber" jdbcType="INTEGER" property="roomnumber" />
    <result column="bedNumber" jdbcType="INTEGER" property="bednumber" />
    <result column="olderNumber" jdbcType="INTEGER" property="oldernumber" />
    <result column="cleared" jdbcType="INTEGER" property="cleared" />
    <result column="notes" jdbcType="VARCHAR" property="notes" />
    <result column="totalFee" jdbcType="REAL" property="totalfee" />
    <result column="building_categary" jdbcType="INTEGER" property="buildingCategary" />
    <result column="sortid" jdbcType="INTEGER" property="sortid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    id, rest_id, name, floorNumber, roomNumber, bedNumber, olderNumber, cleared, notes, 
    totalFee, building_categary, sortid
  </sql>
  <select id="selectByExample" parameterType="domain.configureManage.PensionBuildingExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pension_building
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    select 
    <include refid="Base_Column_List" />
    from pension_building
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    delete from pension_building
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.configureManage.PensionBuildingExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    delete from pension_building
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.configureManage.PensionBuilding">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    insert into pension_building (id, rest_id, name, 
      floorNumber, roomNumber, bedNumber, 
      olderNumber, cleared, notes, 
      totalFee, building_categary, sortid
      )
    values (#{id,jdbcType=INTEGER}, #{restId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{floornumber,jdbcType=INTEGER}, #{roomnumber,jdbcType=INTEGER}, #{bednumber,jdbcType=INTEGER}, 
      #{oldernumber,jdbcType=INTEGER}, #{cleared,jdbcType=INTEGER}, #{notes,jdbcType=VARCHAR}, 
      #{totalfee,jdbcType=REAL}, #{buildingCategary,jdbcType=INTEGER}, #{sortid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="domain.configureManage.PensionBuilding" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    insert into pension_building
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="restId != null">
        rest_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="floornumber != null">
        floorNumber,
      </if>
      <if test="roomnumber != null">
        roomNumber,
      </if>
      <if test="bednumber != null">
        bedNumber,
      </if>
      <if test="oldernumber != null">
        olderNumber,
      </if>
      <if test="cleared != null">
        cleared,
      </if>
      <if test="notes != null">
        notes,
      </if>
      <if test="totalfee != null">
        totalFee,
      </if>
      <if test="buildingCategary != null">
        building_categary,
      </if>
      <if test="sortid != null">
        sortid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="restId != null">
        #{restId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="floornumber != null">
        #{floornumber,jdbcType=INTEGER},
      </if>
      <if test="roomnumber != null">
        #{roomnumber,jdbcType=INTEGER},
      </if>
      <if test="bednumber != null">
        #{bednumber,jdbcType=INTEGER},
      </if>
      <if test="oldernumber != null">
        #{oldernumber,jdbcType=INTEGER},
      </if>
      <if test="cleared != null">
        #{cleared,jdbcType=INTEGER},
      </if>
      <if test="notes != null">
        #{notes,jdbcType=VARCHAR},
      </if>
      <if test="totalfee != null">
        #{totalfee,jdbcType=REAL},
      </if>
      <if test="buildingCategary != null">
        #{buildingCategary,jdbcType=INTEGER},
      </if>
      <if test="sortid != null">
        #{sortid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.configureManage.PensionBuildingExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    select count(*) from pension_building
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    update pension_building
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.restId != null">
        rest_id = #{record.restId,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.floornumber != null">
        floorNumber = #{record.floornumber,jdbcType=INTEGER},
      </if>
      <if test="record.roomnumber != null">
        roomNumber = #{record.roomnumber,jdbcType=INTEGER},
      </if>
      <if test="record.bednumber != null">
        bedNumber = #{record.bednumber,jdbcType=INTEGER},
      </if>
      <if test="record.oldernumber != null">
        olderNumber = #{record.oldernumber,jdbcType=INTEGER},
      </if>
      <if test="record.cleared != null">
        cleared = #{record.cleared,jdbcType=INTEGER},
      </if>
      <if test="record.notes != null">
        notes = #{record.notes,jdbcType=VARCHAR},
      </if>
      <if test="record.totalfee != null">
        totalFee = #{record.totalfee,jdbcType=REAL},
      </if>
      <if test="record.buildingCategary != null">
        building_categary = #{record.buildingCategary,jdbcType=INTEGER},
      </if>
      <if test="record.sortid != null">
        sortid = #{record.sortid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    update pension_building
    set id = #{record.id,jdbcType=INTEGER},
      rest_id = #{record.restId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      floorNumber = #{record.floornumber,jdbcType=INTEGER},
      roomNumber = #{record.roomnumber,jdbcType=INTEGER},
      bedNumber = #{record.bednumber,jdbcType=INTEGER},
      olderNumber = #{record.oldernumber,jdbcType=INTEGER},
      cleared = #{record.cleared,jdbcType=INTEGER},
      notes = #{record.notes,jdbcType=VARCHAR},
      totalFee = #{record.totalfee,jdbcType=REAL},
      building_categary = #{record.buildingCategary,jdbcType=INTEGER},
      sortid = #{record.sortid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.configureManage.PensionBuilding">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    update pension_building
    <set>
      <if test="restId != null">
        rest_id = #{restId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="floornumber != null">
        floorNumber = #{floornumber,jdbcType=INTEGER},
      </if>
      <if test="roomnumber != null">
        roomNumber = #{roomnumber,jdbcType=INTEGER},
      </if>
      <if test="bednumber != null">
        bedNumber = #{bednumber,jdbcType=INTEGER},
      </if>
      <if test="oldernumber != null">
        olderNumber = #{oldernumber,jdbcType=INTEGER},
      </if>
      <if test="cleared != null">
        cleared = #{cleared,jdbcType=INTEGER},
      </if>
      <if test="notes != null">
        notes = #{notes,jdbcType=VARCHAR},
      </if>
      <if test="totalfee != null">
        totalFee = #{totalfee,jdbcType=REAL},
      </if>
      <if test="buildingCategary != null">
        building_categary = #{buildingCategary,jdbcType=INTEGER},
      </if>
      <if test="sortid != null">
        sortid = #{sortid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.configureManage.PensionBuilding">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 29 17:02:36 CST 2014.
    -->
    update pension_building
    set rest_id = #{restId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      floorNumber = #{floornumber,jdbcType=INTEGER},
      roomNumber = #{roomnumber,jdbcType=INTEGER},
      bedNumber = #{bednumber,jdbcType=INTEGER},
      olderNumber = #{oldernumber,jdbcType=INTEGER},
      cleared = #{cleared,jdbcType=INTEGER},
      notes = #{notes,jdbcType=VARCHAR},
      totalFee = #{totalfee,jdbcType=REAL},
      building_categary = #{buildingCategary,jdbcType=INTEGER},
      sortid = #{sortid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 按起止时间查找 事故记录 add by mary 2013-11-20 -->
	<select id="selectOlderLiquidityByDate" parameterType="java.util.Map" resultMap="BaseResultMap">
(
SELECT pbu.id AS id,
pbu.name AS name, COUNT(pl.older_id) AS olderNumber
FROM pension_livingrecord pl
left JOIN pension_departregister pd ON pd.older_id = pl.older_id
left JOIN pension_bed pb ON pl.bed_id = pb.id
left JOIN pension_room pr ON pb.room_id = pr.id
left JOIN pension_floor pf ON pr.floor_id = pf.id
left JOIN pension_building pbu ON pbu.id = pf.build_id
WHERE pl.cleared = 2 AND pb.cleared = 2 AND pr.cleared = 2 AND pf.cleared = 2 AND pb.cleared = 2 and pbu.cleared=2
AND (pd.isAgree = 6 OR pd.isAgree IS NULL)
<if test="date!=null">
and unix_timestamp(pl.visitTime)
			&lt;=unix_timestamp(#{date})
and (unix_timestamp(pd.real_leaveTime)
			&gt;unix_timestamp(#{date})
	or pd.real_leaveTime is null)
</if>
GROUP BY pbu.id
)
union
(
select b.id as id,b.name as name,0 as olderNumber
from pension_building b where b.cleared = 2 and b.Id not in(
SELECT pbu.id AS id
FROM pension_livingrecord pl
left JOIN pension_departregister pd ON pd.older_id = pl.older_id
left JOIN pension_bed pb ON pl.bed_id = pb.id
left JOIN pension_room pr ON pb.room_id = pr.id
left JOIN pension_floor pf ON pr.floor_id = pf.id
left JOIN pension_building pbu ON pbu.id = pf.build_id
WHERE pl.cleared = 2 AND pb.cleared = 2 AND pr.cleared = 2 AND pf.cleared = 2 AND pb.cleared = 2 
AND (pd.isAgree = 6 OR pd.isAgree IS NULL)
<if test="date!=null">
and unix_timestamp(pl.visitTime)
			&lt;=unix_timestamp(#{date})
and (unix_timestamp(pd.real_leaveTime)
			&gt;unix_timestamp(#{date})
	or pd.real_leaveTime is null)
</if>
GROUP BY pbu.id
)
)
order by id		
	</select>
	
	
	<!-- 按起止时间查找 现金流动情况 add by mary 2013-11-22 -->
	<select id="selectCapitalFlowByDetail" parameterType="java.util.Map" resultMap="BaseResultMap">
(
SELECT pb2.id AS id, SUM(pn.totalFees) AS totalFee
FROM pension_normalpaymentdetail pn
LEFT JOIN pension_livingrecord pl ON pn.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pn.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pn.cleared = 2 
<if test="refundTypeId ==null">
and pn.refund_id is null
</if>
<if test="refundTypeId !=null">
and pn.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
<if test="itemPurseId !=null">
and pn.items_id = #{itemPurseId,jdbcType=INTEGER}
</if>
<if test="payFlag == 1">
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
<if test="payFlag == 2">
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&gt;unix_timestamp(#{endDate})
</if>
GROUP BY pb2.id) UNION (
SELECT pb2.id AS id, SUM(pt.totalFees) AS totalFee
FROM pension_temppaymentdetail pt
LEFT JOIN pension_livingrecord pl ON pt.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pt.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pt.cleared = 2 
<if test="source !=null">
and pt.source = #{source,jdbcType=INTEGER}
</if>
<if test="refundTypeId ==null">
and pt.refund_id is null
</if>
<if test="refundTypeId !=null">
and pt.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
<if test="itemPurseId !=null">
and pt.items_id = #{itemPurseId,jdbcType=INTEGER}
</if>
<if test="payFlag == 1">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
<if test="payFlag == 2">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&gt;unix_timestamp(#{endDate})
</if>
GROUP BY pb2.id) UNION (
SELECT pb3.id AS id,0 AS totalFee
FROM pension_building pb3
WHERE pb3.cleared = 2 and pb3.id NOT IN (
SELECT pb2.id
FROM pension_normalpaymentdetail pn
LEFT JOIN pension_livingrecord pl ON pn.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pn.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pn.cleared = 2 
<if test="refundTypeId ==null">
and pn.refund_id is null
</if>
<if test="refundTypeId !=null">
and pn.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
<if test="itemPurseId !=null">
and pn.items_id = #{itemPurseId,jdbcType=INTEGER}
</if>
<if test="payFlag == 1">
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
<if test="payFlag == 2">
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&gt;unix_timestamp(#{endDate})
</if>
GROUP BY pb2.id UNION
SELECT pb2.id
FROM pension_temppaymentdetail pt
LEFT JOIN pension_livingrecord pl ON pt.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pt.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pt.cleared = 2 
<if test="source !=null">
and pt.source = #{source,jdbcType=INTEGER}
</if>
<if test="refundTypeId ==null">
and pt.refund_id is null
</if>
<if test="refundTypeId !=null">
and pt.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
<if test="itemPurseId !=null">
and pt.items_id = #{itemPurseId,jdbcType=INTEGER}
</if>
<if test="payFlag == 1">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
<if test="payFlag == 2">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&gt;unix_timestamp(#{endDate})
</if>
GROUP BY pb2.id))
ORDER BY id	

	</select>
	<!-- 根据起止时间和支付方式查询日常缴费信息表 ，查询以该支付方式的缴费金额 add by mary 2013-11-22 -->
	<select id="selectNormalCapitalFlowByPayway" parameterType="java.util.Map" resultMap="BaseResultMap">
	select pb1.id as id ,sum(pp.money) as totalFee
from pension_paymentdetail pp
left join pension_normalpayment pn
on pp.paymentID = pn.id AND pp.payType_id = 1
left join pension_livingrecord pl
on pn.older_id = pl.older_id
left join pension_bed pb
on pb.id = pl.bed_id
left join pension_room pr 
on pb.room_id = pr.id
left join pension_floor pf
on pf.id = pr.floor_id
left join pension_building pb1
on pb1.id = pf.build_id
where pn.cleared = 2 
<if test="paywayId !=null">
and pp.payStyle_id = #{paywayId,jdbcType=INTEGER}
</if>
and unix_timestamp(pp.payTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pp.payTime)
			&lt;=unix_timestamp(#{endDate})
group by pb1.id
union
select pb2.id,0 as totalFee
from pension_building pb2
where pb2.cleared = 2 and pb2.id not in
(
select pb1.id as id 
from pension_paymentdetail pp
left join pension_normalpayment pn
on pp.paymentID = pn.id AND pp.payType_id = 1
left join pension_livingrecord pl
on pn.older_id = pl.older_id
left join pension_bed pb
on pb.id = pl.bed_id
left join pension_room pr 
on pb.room_id = pr.id
left join pension_floor pf
on pf.id = pr.floor_id
left join pension_building pb1
on pb1.id = pf.build_id
where pn.cleared = 2
<if test="paywayId !=null">
and pp.payStyle_id = #{paywayId,jdbcType=INTEGER}
</if>
and unix_timestamp(pp.payTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pp.payTime)
			&lt;=unix_timestamp(#{endDate})
group by pb1.id
)
order by id
	</select>
	<!-- 根据起止时间和支付方式查询临时缴费信息表 ，查询以该支付方式的缴费金额 add by mary 2013-11-22 -->
	<select id="selectTempCapitalFlowByPayway" parameterType="java.util.Map" resultMap="BaseResultMap">
	select pb1.id as id ,sum(pp.money) as totalFee
from pension_paymentdetail pp
left join pension_temppayment pn
on pp.paymentID = pn.id AND pp.payType_id = 2
left join pension_livingrecord pl
on pn.older_id = pl.older_id
left join pension_bed pb
on pb.id = pl.bed_id
left join pension_room pr 
on pb.room_id = pr.id
left join pension_floor pf
on pf.id = pr.floor_id
left join pension_building pb1
on pb1.id = pf.build_id
where pn.cleared = 2 
<if test="paywayId !=null">
and pp.payStyle_id = #{paywayId,jdbcType=INTEGER}
</if>
and unix_timestamp(pp.payTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pp.payTime)
			&lt;=unix_timestamp(#{endDate})
group by pb1.id
union
select pb2.id,0 as totalFee
from pension_building pb2
where pb2.cleared = 2 and pb2.id not in
(
select pb1.id as id 
from pension_paymentdetail pp
left join pension_temppayment pn
on pp.paymentID = pn.id AND pp.payType_id = 2
left join pension_livingrecord pl
on pn.older_id = pl.older_id
left join pension_bed pb
on pb.id = pl.bed_id
left join pension_room pr 
on pb.room_id = pr.id
left join pension_floor pf
on pf.id = pr.floor_id
left join pension_building pb1
on pb1.id = pf.build_id
where pn.cleared = 2
<if test="paywayId !=null">
and pp.payStyle_id = #{paywayId,jdbcType=INTEGER}
</if>
and unix_timestamp(pp.payTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pp.payTime)
			&lt;=unix_timestamp(#{endDate})
group by pb1.id
)
order by id
	</select>
	<!-- 根据起止时间和支付方式查询押金缴费信息表 ，查询以该支付方式的缴费金额 add by mary 2013-11-22 -->
	<select id="selectDepositCapitalFlowByPayway" parameterType="java.util.Map" resultMap="BaseResultMap">
	select pb1.id as id ,sum(pp.money) as totalFee
from pension_paymentdetail pp
left join pension_deposit_log pdl
on pp.paymentID = pdl.id AND pp.payType_id = 3
left join pension_deposit pd
on pd.id = pdl.deposit_id
left join pension_livingrecord pl
on pd.older_id = pl.older_id
left join pension_bed pb
on pb.id = pl.bed_id
left join pension_room pr 
on pb.room_id = pr.id
left join pension_floor pf
on pf.id = pr.floor_id
left join pension_building pb1
on pb1.id = pf.build_id
where 1=1
<if test="paywayId !=null">
and pp.payStyle_id = #{paywayId,jdbcType=INTEGER}
</if>
and unix_timestamp(pp.payTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pp.payTime)
			&lt;=unix_timestamp(#{endDate})
group by pb1.id
union
select pb2.id,0 as totalFee
from pension_building pb2
where pb2.id not in
(
select pb1.id as id 
from pension_paymentdetail pp
left join pension_deposit_log pdl
on pp.paymentID = pdl.id AND pp.payType_id = 3
left join pension_deposit pd
on pd.id = pdl.deposit_id
left join pension_livingrecord pl
on pd.older_id = pl.older_id
left join pension_bed pb
on pb.id = pl.bed_id
left join pension_room pr 
on pb.room_id = pr.id
left join pension_floor pf
on pf.id = pr.floor_id
left join pension_building pb1
on pb1.id = pf.build_id
where 1=1
<if test="paywayId !=null">
and pp.payStyle_id = #{paywayId,jdbcType=INTEGER}
</if>
and unix_timestamp(pp.payTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pp.payTime)
			&lt;=unix_timestamp(#{endDate})
group by pb1.id
)
order by id
	</select>
	<!-- 按起止时间查找 现金流动情况 add by mary 2013-11-22 -->
	<select id="selectInOlderNumInPeriod" parameterType="java.util.Map" resultMap="BaseResultMap">
	
(
SELECT pbu.id AS id,
pbu.name AS name, COUNT(pl.older_id) AS olderNumber
FROM pension_livingrecord pl
left JOIN pension_departregister pd ON pd.older_id = pl.older_id
left JOIN pension_bed pb ON pl.bed_id = pb.id
left JOIN pension_room pr ON pb.room_id = pr.id
left JOIN pension_floor pf ON pr.floor_id = pf.id
left JOIN pension_building pbu ON pbu.id = pf.build_id
WHERE pl.cleared = 2 AND pb.cleared = 2 AND pr.cleared = 2 AND pf.cleared = 2 AND pb.cleared = 2 
AND (pd.isAgree = 6 OR pd.isAgree IS NULL)
and unix_timestamp(pl.visitTime)
			&lt;=unix_timestamp(#{endDate})
and (unix_timestamp(pd.real_leaveTime)
			&gt;unix_timestamp(#{startDate})
	or pd.real_leaveTime is null)
GROUP BY pbu.id
)
union
(
select b.id as id,b.name as name,0 as olderNumber
from pension_building b where b.cleared = 2 and b.Id not in(
SELECT pbu.id AS id
FROM pension_livingrecord pl
left JOIN pension_departregister pd ON pd.older_id = pl.older_id
left JOIN pension_bed pb ON pl.bed_id = pb.id
left JOIN pension_room pr ON pb.room_id = pr.id
left JOIN pension_floor pf ON pr.floor_id = pf.id
left JOIN pension_building pbu ON pbu.id = pf.build_id
WHERE pl.cleared = 2 AND pb.cleared = 2 AND pr.cleared = 2 AND pf.cleared = 2 AND pb.cleared = 2 
AND (pd.isAgree = 6 OR pd.isAgree IS NULL)
and unix_timestamp(pl.visitTime)
			&lt;=unix_timestamp(#{endDate})
and (unix_timestamp(pd.real_leaveTime)
			&gt;unix_timestamp(#{startDate})
	or pd.real_leaveTime is null)
GROUP BY pbu.id
)
)
order by id		

	</select>
	
	<!-- 按照菜品编号查询临时缴费 add by mary 2013-12-05 -->
	<select id="selectCapitalFlowByFoodMenu" parameterType="java.util.Map" resultMap="BaseResultMap">
 (
SELECT pb2.id AS id, SUM(pt.totalFees) AS totalFee
FROM pension_temppaymentdetail pt
LEFT JOIN pension_livingrecord pl ON pt.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pt.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pt.cleared = 2 
<if test="source !=null">
and pt.source = #{source,jdbcType=INTEGER}
</if>
<if test="refundTypeId ==null">
and pt.refund_id is null
</if>
<if test="refundTypeId !=null">
and pt.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
<if test="itemPurseId !=null">
and pt.items_id = #{itemPurseId,jdbcType=INTEGER}
</if>
<if test="payFlag == 1">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
<if test="payFlag == 2">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&gt;unix_timestamp(#{endDate})
</if>
GROUP BY pb2.id) UNION (
SELECT pb3.id AS id,0 AS totalFee
FROM pension_building pb3
WHERE pb3.cleared = 2 and pb3.id NOT IN (
SELECT pb2.id
FROM pension_temppaymentdetail pt
LEFT JOIN pension_livingrecord pl ON pt.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pt.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pt.cleared = 2 
<if test="source !=null">
and pt.source = #{source,jdbcType=INTEGER}
</if>
<if test="refundTypeId ==null">
and pt.refund_id is null
</if>
<if test="refundTypeId !=null">
and pt.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
<if test="itemPurseId !=null">
and pt.items_id = #{itemPurseId,jdbcType=INTEGER}
</if>
<if test="payFlag == 1">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&lt;=unix_timestamp(#{endDate})
</if>
<if test="payFlag == 2">
and unix_timestamp(pt.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pt.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pt.payTime)
			&gt;unix_timestamp(#{endDate})
</if>
GROUP BY pb2.id))
ORDER BY id	

	</select>
	<!--  根据开始结束日期查询日常缴费退费相关 Mary 2013-12-05 -->
	<select id="selectNormalCapitalFlowForRefund" parameterType="java.util.Map" resultMap="BaseResultMap">
	(
SELECT pb2.id AS id,pb2.name as name, SUM(pn.totalFees) AS totalFee
FROM pension_normalpaymentdetail pn
LEFT JOIN pension_livingrecord pl ON pn.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pn.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pn.cleared = 2 
<if test="refundTypeId !=null">
and pn.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&lt;=unix_timestamp(#{endDate})
GROUP BY pb2.id) UNION (
SELECT pb3.id AS id,pb3.name as name,0 AS totalFee
FROM pension_building pb3
WHERE pb3.cleared = 2 and pb3.id NOT IN (
SELECT pb2.id
FROM pension_normalpaymentdetail pn
LEFT JOIN pension_livingrecord pl ON pn.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pn.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pn.cleared = 2 
<if test="refundTypeId !=null">
and pn.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&lt;=unix_timestamp(#{endDate})
GROUP BY pb2.id )
)
order by id
	</select>
	<!--  根据开始结束日期查询临时缴费退费相关 Mary 2013-12-05 -->
	<select id="selectTempCapitalFlowForRefund" parameterType="java.util.Map" resultMap="BaseResultMap">
	(
SELECT pb2.id AS id,pb2.name as name, SUM(pn.totalFees) AS totalFee
FROM pension_temppaymentdetail pn
LEFT JOIN pension_livingrecord pl ON pn.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pn.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pn.cleared = 2 
<if test="refundTypeId !=null">
and pn.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&lt;=unix_timestamp(#{endDate})
GROUP BY pb2.id) UNION (
SELECT pb3.id AS id,pb3.name as name,0 AS totalFee
FROM pension_building pb3
WHERE pb3.cleared = 2 and pb3.id NOT IN (
SELECT pb2.id
FROM pension_temppaymentdetail pn
LEFT JOIN pension_livingrecord pl ON pn.older_id = pl.older_id
LEFT JOIN pension_older po ON po.id = pn.older_id
LEFT JOIN pension_bed pb1 ON pb1.id = pl.bed_id
LEFT JOIN pension_room pr ON pr.id = pb1.room_id
LEFT JOIN pension_floor pf ON pf.id = pr.floor_id
LEFT JOIN pension_building pb2 ON pf.build_id = pb2.id
WHERE pn.cleared = 2 
<if test="refundTypeId !=null">
and pn.refund_id = #{refundTypeId,jdbcType=INTEGER}
</if>
and unix_timestamp(pn.generateTime)
			&gt;=unix_timestamp(#{startDate})
and unix_timestamp(pn.generateTime)
			&lt;=unix_timestamp(#{endDate})
and unix_timestamp(pn.payTime)
			&lt;=unix_timestamp(#{endDate})
GROUP BY pb2.id )
)
order by id
	</select>
	<!-- 按起止时间查找在院老人数 （数量）add by mary 2013-11-20 -->
	<select id="selectOlderLiquidityByDateInTotal" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT count(*)
FROM pension_livingrecord pl
left JOIN pension_departregister pd ON pd.older_id = pl.older_id 
and pl.cleared = 2 and (pd.cleared = 2 or pd.cleared is null) 
and (pd.isAgree = 6 OR pd.isAgree IS NULL)
where 1=1
<if test="date!=null">
and unix_timestamp(pl.visitTime)
			&lt;=unix_timestamp(#{date})
and (unix_timestamp(pd.real_leaveTime)
			&gt;unix_timestamp(#{date})
	or pd.real_leaveTime is null)
</if>
	</select>
	
</mapper>