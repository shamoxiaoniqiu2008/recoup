<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.activityManage.PensionAttendolderMapper">
  <resultMap id="BaseResultMap" type="domain.activityManage.PensionAttendolder">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="activity_id" jdbcType="INTEGER" property="activityId" />
    <result column="older_id" jdbcType="INTEGER" property="olderId" />
    <result column="enlistTime" jdbcType="TIMESTAMP" property="enlisttime" />
    <result column="isAttend" jdbcType="INTEGER" property="isattend" />
    <result column="attended" jdbcType="INTEGER" property="attended" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="appraise" jdbcType="INTEGER" property="appraise" />
    <result column="checker_id" jdbcType="INTEGER" property="checkerId" />
    <result column="checkerName" jdbcType="VARCHAR" property="checkername" />
    <result column="checkResult" jdbcType="INTEGER" property="checkresult" />
    <result column="checkTime" jdbcType="TIMESTAMP" property="checktime" />
    <result column="notes" jdbcType="VARCHAR" property="notes" />
    <result column="cleared" jdbcType="INTEGER" property="cleared" />
    <result column="modify_remind" jdbcType="INTEGER" property="modifyRemind" />
    <result column="cancel_remind" jdbcType="INTEGER" property="cancelRemind" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    id, activity_id, older_id, enlistTime, isAttend, attended, reason, appraise, checker_id, 
    checkerName, checkResult, checkTime, notes, cleared, modify_remind, cancel_remind
  </sql>
  <select id="selectByExample" parameterType="domain.activityManage.PensionAttendolderExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pension_attendolder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    select 
    <include refid="Base_Column_List" />
    from pension_attendolder
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    delete from pension_attendolder
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.activityManage.PensionAttendolderExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    delete from pension_attendolder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.activityManage.PensionAttendolder">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    insert into pension_attendolder (id, activity_id, older_id, 
      enlistTime, isAttend, attended, 
      reason, appraise, checker_id, 
      checkerName, checkResult, checkTime, 
      notes, cleared, modify_remind, 
      cancel_remind)
    values (#{id,jdbcType=INTEGER}, #{activityId,jdbcType=INTEGER}, #{olderId,jdbcType=INTEGER}, 
      #{enlisttime,jdbcType=TIMESTAMP}, #{isattend,jdbcType=INTEGER}, #{attended,jdbcType=INTEGER}, 
      #{reason,jdbcType=VARCHAR}, #{appraise,jdbcType=INTEGER}, #{checkerId,jdbcType=INTEGER}, 
      #{checkername,jdbcType=VARCHAR}, #{checkresult,jdbcType=INTEGER}, #{checktime,jdbcType=TIMESTAMP}, 
      #{notes,jdbcType=VARCHAR}, #{cleared,jdbcType=INTEGER}, #{modifyRemind,jdbcType=INTEGER}, 
      #{cancelRemind,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="domain.activityManage.PensionAttendolder" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    insert into pension_attendolder
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="activityId != null">
        activity_id,
      </if>
      <if test="olderId != null">
        older_id,
      </if>
      <if test="enlisttime != null">
        enlistTime,
      </if>
      <if test="isattend != null">
        isAttend,
      </if>
      <if test="attended != null">
        attended,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="appraise != null">
        appraise,
      </if>
      <if test="checkerId != null">
        checker_id,
      </if>
      <if test="checkername != null">
        checkerName,
      </if>
      <if test="checkresult != null">
        checkResult,
      </if>
      <if test="checktime != null">
        checkTime,
      </if>
      <if test="notes != null">
        notes,
      </if>
      <if test="cleared != null">
        cleared,
      </if>
      <if test="modifyRemind != null">
        modify_remind,
      </if>
      <if test="cancelRemind != null">
        cancel_remind,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="activityId != null">
        #{activityId,jdbcType=INTEGER},
      </if>
      <if test="olderId != null">
        #{olderId,jdbcType=INTEGER},
      </if>
      <if test="enlisttime != null">
        #{enlisttime,jdbcType=TIMESTAMP},
      </if>
      <if test="isattend != null">
        #{isattend,jdbcType=INTEGER},
      </if>
      <if test="attended != null">
        #{attended,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="appraise != null">
        #{appraise,jdbcType=INTEGER},
      </if>
      <if test="checkerId != null">
        #{checkerId,jdbcType=INTEGER},
      </if>
      <if test="checkername != null">
        #{checkername,jdbcType=VARCHAR},
      </if>
      <if test="checkresult != null">
        #{checkresult,jdbcType=INTEGER},
      </if>
      <if test="checktime != null">
        #{checktime,jdbcType=TIMESTAMP},
      </if>
      <if test="notes != null">
        #{notes,jdbcType=VARCHAR},
      </if>
      <if test="cleared != null">
        #{cleared,jdbcType=INTEGER},
      </if>
      <if test="modifyRemind != null">
        #{modifyRemind,jdbcType=INTEGER},
      </if>
      <if test="cancelRemind != null">
        #{cancelRemind,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.activityManage.PensionAttendolderExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    select count(*) from pension_attendolder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    update pension_attendolder
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.activityId != null">
        activity_id = #{record.activityId,jdbcType=INTEGER},
      </if>
      <if test="record.olderId != null">
        older_id = #{record.olderId,jdbcType=INTEGER},
      </if>
      <if test="record.enlisttime != null">
        enlistTime = #{record.enlisttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isattend != null">
        isAttend = #{record.isattend,jdbcType=INTEGER},
      </if>
      <if test="record.attended != null">
        attended = #{record.attended,jdbcType=INTEGER},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.appraise != null">
        appraise = #{record.appraise,jdbcType=INTEGER},
      </if>
      <if test="record.checkerId != null">
        checker_id = #{record.checkerId,jdbcType=INTEGER},
      </if>
      <if test="record.checkername != null">
        checkerName = #{record.checkername,jdbcType=VARCHAR},
      </if>
      <if test="record.checkresult != null">
        checkResult = #{record.checkresult,jdbcType=INTEGER},
      </if>
      <if test="record.checktime != null">
        checkTime = #{record.checktime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.notes != null">
        notes = #{record.notes,jdbcType=VARCHAR},
      </if>
      <if test="record.cleared != null">
        cleared = #{record.cleared,jdbcType=INTEGER},
      </if>
      <if test="record.modifyRemind != null">
        modify_remind = #{record.modifyRemind,jdbcType=INTEGER},
      </if>
      <if test="record.cancelRemind != null">
        cancel_remind = #{record.cancelRemind,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    update pension_attendolder
    set id = #{record.id,jdbcType=INTEGER},
      activity_id = #{record.activityId,jdbcType=INTEGER},
      older_id = #{record.olderId,jdbcType=INTEGER},
      enlistTime = #{record.enlisttime,jdbcType=TIMESTAMP},
      isAttend = #{record.isattend,jdbcType=INTEGER},
      attended = #{record.attended,jdbcType=INTEGER},
      reason = #{record.reason,jdbcType=VARCHAR},
      appraise = #{record.appraise,jdbcType=INTEGER},
      checker_id = #{record.checkerId,jdbcType=INTEGER},
      checkerName = #{record.checkername,jdbcType=VARCHAR},
      checkResult = #{record.checkresult,jdbcType=INTEGER},
      checkTime = #{record.checktime,jdbcType=TIMESTAMP},
      notes = #{record.notes,jdbcType=VARCHAR},
      cleared = #{record.cleared,jdbcType=INTEGER},
      modify_remind = #{record.modifyRemind,jdbcType=INTEGER},
      cancel_remind = #{record.cancelRemind,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.activityManage.PensionAttendolder">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    update pension_attendolder
    <set>
      <if test="activityId != null">
        activity_id = #{activityId,jdbcType=INTEGER},
      </if>
      <if test="olderId != null">
        older_id = #{olderId,jdbcType=INTEGER},
      </if>
      <if test="enlisttime != null">
        enlistTime = #{enlisttime,jdbcType=TIMESTAMP},
      </if>
      <if test="isattend != null">
        isAttend = #{isattend,jdbcType=INTEGER},
      </if>
      <if test="attended != null">
        attended = #{attended,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="appraise != null">
        appraise = #{appraise,jdbcType=INTEGER},
      </if>
      <if test="checkerId != null">
        checker_id = #{checkerId,jdbcType=INTEGER},
      </if>
      <if test="checkername != null">
        checkerName = #{checkername,jdbcType=VARCHAR},
      </if>
      <if test="checkresult != null">
        checkResult = #{checkresult,jdbcType=INTEGER},
      </if>
      <if test="checktime != null">
        checkTime = #{checktime,jdbcType=TIMESTAMP},
      </if>
      <if test="notes != null">
        notes = #{notes,jdbcType=VARCHAR},
      </if>
      <if test="cleared != null">
        cleared = #{cleared,jdbcType=INTEGER},
      </if>
      <if test="modifyRemind != null">
        modify_remind = #{modifyRemind,jdbcType=INTEGER},
      </if>
      <if test="cancelRemind != null">
        cancel_remind = #{cancelRemind,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.activityManage.PensionAttendolder">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Mar 03 11:07:59 CST 2014.
    -->
    update pension_attendolder
    set activity_id = #{activityId,jdbcType=INTEGER},
      older_id = #{olderId,jdbcType=INTEGER},
      enlistTime = #{enlisttime,jdbcType=TIMESTAMP},
      isAttend = #{isattend,jdbcType=INTEGER},
      attended = #{attended,jdbcType=INTEGER},
      reason = #{reason,jdbcType=VARCHAR},
      appraise = #{appraise,jdbcType=INTEGER},
      checker_id = #{checkerId,jdbcType=INTEGER},
      checkerName = #{checkername,jdbcType=VARCHAR},
      checkResult = #{checkresult,jdbcType=INTEGER},
      checkTime = #{checktime,jdbcType=TIMESTAMP},
      notes = #{notes,jdbcType=VARCHAR},
      cleared = #{cleared,jdbcType=INTEGER},
      modify_remind = #{modifyRemind,jdbcType=INTEGER},
      cancel_remind = #{cancelRemind,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- add by justin.su 2013-09-15 -->
  <select id="selectByCondition" parameterType="domain.activityManage.PensionAttendolderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pension_attendolder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="selectSumQty" resultType="controller.activityManage.ExtendForActivityAnalyse">
	  select
		st.activityId as activityId
		,st.activityName as activityName
		,st.startDate as startDate
		,st.itemplace as itemplace
		,st.activityerQty as activityerQty
		,st.summary as summary
		,st.summaryerName as summaryName
		,st.summaryTime as summaryDate
		,st.summary_note as summaryNote 
		,case when an.appraiseNum is null then 0 else an.appraiseNum end as attendNum
		,case when lp.appraiseNum is null then 0 else lp.appraiseNum end as likeNum
		,case when ulp.appraiseNum is null then 0 else ulp.appraiseNum end as unLikeNum
		,case when uk.appraiseNum is null then 0 else uk.appraiseNum end as unKnownNum
	from
		(
			select
				pat.activity_id as activityId
				,pay.itemname as activityName
				,pay.ItemPlace as itemplace
				,pay.starttime  as startDate
				,count(pat.older_id)  as activityerQty
				,pay.summary as summary
				,pay.summaryerName as summaryerName
				,pay.summaryTime as summaryTime
				,pay.summary_note as summary_note 
			from
				pension_attendolder pat
			left join
				pension_activity pay
			on
				pat.activity_id = pay.id
			group by
				pat.activity_id
				,pay.itemname
				,pay.starttime
		) st
		
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.appraise = 2
		group by
			pat.activity_id
		) ulp
	on
		st.activityId = ulp.activityId
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.appraise = 1
		group by
			pat.activity_id
	) lp
	on
		lp.activityId = st.activityId
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.appraise is null
		group by
			pat.activity_id
		) uk
	on
		uk.activityId = st.activityId
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.attended = 1
		group by
			pat.activity_id
		) an
	on
		an.activityId = st.activityId

  </select>
  
  <select id="selectSumQtyByCondition" parameterType="map" resultType="controller.activityManage.ExtendForActivityAnalyse">
  		  select
		st.activityId as activityId
		,st.activityName as activityName
		,st.startDate as startDate
		,st.itemplace as itemplace
		,st.activityerQty as activityerQty
		,st.summary as summary
		,st.summaryerName as summaryName
		,st.summaryTime as summaryDate
		,st.summary_note as summaryNote 
		,case when an.appraiseNum is null then 0 else an.appraiseNum end as attendNum
		,case when lp.appraiseNum is null then 0 else lp.appraiseNum end as likeNum
		,case when ulp.appraiseNum is null then 0 else ulp.appraiseNum end as unLikeNum
		,case when uk.appraiseNum is null then 0 else uk.appraiseNum end as unKnownNum
	from
		(
			select
				pat.activity_id as activityId
				,pay.itemname as activityName
				,pay.ItemPlace as itemplace
				,pay.starttime  as startDate
				,count(pat.older_id)  as activityerQty
				,pay.summary as summary
				,pay.summaryerName as summaryerName
				,pay.summaryTime as summaryTime
				,pay.summary_note as summary_note 
			from
				pension_attendolder pat
			left join
				pension_activity pay
			on
				pat.activity_id = pay.id
			where
					1=1
				<if test="itemId != null">
					and pat.activity_id = #{itemId}
				 </if>
				 <if test="startDate != null">
					and (pay.starttime = #{startDate} or pay.starttime &gt; #{startDate})
				 </if>
				 <if test="endDate != null">
					and (pay.starttime = #{endDate} or pay.starttime &lt; #{endDate})
				 </if>
				 <if test="appraise != null">
					and pay.summary = #{appraise}
				 </if>
			group by
				pat.activity_id
				,pay.itemname
				,pay.starttime
		) st
		
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.appraise = 2
		group by
			pat.activity_id
		) ulp
	on
		st.activityId = ulp.activityId
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.appraise = 1
		group by
			pat.activity_id
	) lp
	on
		lp.activityId = st.activityId
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.appraise is null
		group by
			pat.activity_id
		) uk
	on
		uk.activityId = st.activityId
	left join
		(
		select
			pat.activity_id as activityId
			,count(pat.older_id) as appraiseNum
		from
			pension_attendolder pat
		where
			pat.attended = 1
		group by
			pat.activity_id
		) an
	on
		an.activityId = st.activityId
  </select>
  
  <!-- add by justin.su 2013-10-10 -->
  <update id="updateAttendolderRecord" parameterType="map">
  		update pension_activity pa set pa.enlistnumber = enlistnumber +1 where pa.id = #{activityId}
  </update>
  <!-- add by justin.su 2013-11-13 -->
  <select id="selectAttendOlderInfo" parameterType="map" resultType="domain.activityManage.PensionAttendolder">
  		SELECT 
		    pao.*,
		    pol.`name` AS olderName,
		    py.`itemName` AS itemName,
		    py.`itemPlace` AS itemplace,
		    CASE pao.`attended`
		        WHEN 1 THEN '是'
		        WHEN 2 THEN '否'
		        ELSE '未知'
		    END AS addIsOrNotName,
		    pao.reason AS reason,
		    pao.notes AS notes
		FROM
		    pension_attendolder pao
		        INNER JOIN
		    pension_activity py ON pao.`activity_id` = py.`id`
		        INNER JOIN
		    pension_older pol ON pao.`older_id` = pol.`id`
		where
		  1=1
		<if test="activityId != null">
			AND pao.`activity_id` = #{activityId}
		</if>
		<if test="olderId != null">
			AND pao.`older_id` = #{olderId}
		</if>
		<if test="startDate != null">
			AND  (DATE_FORMAT(DATE_SUB(pao.`enlistTime`,INTERVAL 8 DAY), '%Y-%m-%d') =  DATE_FORMAT(DATE_SUB(#{startDate},INTERVAL 8 DAY), '%Y-%m-%d')
			OR  DATE_FORMAT(DATE_SUB(pao.`enlistTime`,INTERVAL 8 DAY), '%Y-%m-%d') &gt;  DATE_FORMAT(DATE_SUB(#{startDate},INTERVAL 8 DAY), '%Y-%m-%d'))
		</if>
		<if test="endDate != null">
			AND  (DATE_FORMAT(DATE_SUB(pao.`enlistTime`,INTERVAL 8 DAY), '%Y-%m-%d') =  DATE_FORMAT(DATE_SUB(#{endDate},INTERVAL 8 DAY), '%Y-%m-%d')
			OR  DATE_FORMAT(DATE_SUB(pao.`enlistTime`,INTERVAL 8 DAY), '%Y-%m-%d') &lt;  DATE_FORMAT(DATE_SUB(#{endDate},INTERVAL 8 DAY), '%Y-%m-%d'))
		</if>
		<if test="attended != null">
			AND pao.`attended` = #{attended}
		</if>
  </select>
  
  <!-- add by justin.su 2013-11-14 -->
  <select id="selectAttendOlderCheckInfo" parameterType="map" resultType="domain.activityManage.PensionAttendolder">
  		SELECT
			pao.`id` AS id
			,pao.`older_id` AS olderId
			,pol.`name` AS olderName
			,pao.`activity_id` AS activityId
			,py.`itemName` AS itemName
			,py.`itemPlace` AS itemplace
			,py.`startTime` AS startDate
			,pao.`appraise` AS appraise
			,CASE pao.`appraise`  WHEN 1 THEN '★'  WHEN 2 THEN '★★'  WHEN 3 THEN '★★★'  WHEN 4 THEN '★★★★'  WHEN 5 THEN '★★★★★' ELSE '未评价' END AS appraiseName
			,pao.`checkResult` AS checkresult
			,CASE pao.`checkResult` WHEN 1 THEN '满意' WHEN 2 THEN '不满意' ELSE '未质检' END AS checkresultName
			,pe.name AS checkerName
			,pao.checkTime AS checktime
			,pao.notes AS notes
			FROM
			pension_attendolder pao
			INNER JOIN
			pension_activity py
			ON
			pao.`activity_id` = py.`id`
			INNER JOIN
			pension_older pol
			ON
			pao.`older_id` = pol.`id`
			LEFT JOIN
			pension_employee pe
			ON
			pao.checker_id = pe.id
			WHERE
			pao.attended = 1
			AND
			1=1
		<if test="activityId != null">
			AND pao.`activity_id` = #{activityId}
		</if>
		<if test="olderId != null">
			AND pao.`older_id` = #{olderId}
		</if>
		<if test="startDate != null">
			AND  (DATE_FORMAT(DATE_SUB(py.`startTime`,INTERVAL 8 DAY), '%Y-%m-%d') =  DATE_FORMAT(DATE_SUB(#{startDate},INTERVAL 8 DAY), '%Y-%m-%d')
			OR  DATE_FORMAT(DATE_SUB(py.`startTime`,INTERVAL 8 DAY), '%Y-%m-%d') &gt;  DATE_FORMAT(DATE_SUB(#{startDate},INTERVAL 8 DAY), '%Y-%m-%d'))
		</if>
		<if test="endDate != null">
			AND  (DATE_FORMAT(DATE_SUB(py.`startTime`,INTERVAL 8 DAY), '%Y-%m-%d') =  DATE_FORMAT(DATE_SUB(#{endDate},INTERVAL 8 DAY), '%Y-%m-%d')
			OR  DATE_FORMAT(DATE_SUB(py.`startTime`,INTERVAL 8 DAY), '%Y-%m-%d') &lt;  DATE_FORMAT(DATE_SUB(#{endDate},INTERVAL 8 DAY), '%Y-%m-%d'))
		</if>
  </select>
</mapper>